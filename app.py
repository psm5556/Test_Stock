import streamlit as st
import plotly.graph_objs as go
import pandas as pd
import numpy as np
import yfinance as yf
import requests
from datetime import datetime, timedelta
from fear_and_greed import get
import warnings
import json
import time
import re
from concurrent.futures import ThreadPoolExecutor, as_completed
warnings.filterwarnings('ignore')

class StockAnalyzer:
    """Ï£ºÏãù Í∏∞Ïà†Ï†Å Î∂ÑÏÑùÏùÑ ÏúÑÌïú ÌÅ¥ÎûòÏä§"""
    
    def __init__(self):
        """Ï¥àÍ∏∞Ìôî"""
        self.fear_greed_current = None
        self.fear_greed_label = None
        self.fear_greed_history = None
        self.current_period = '6mo'  # Í∏∞Î≥∏Í∞í
        
        # Í∏∞Í∞ÑÎ≥Ñ ÎùºÎ≤® Îß§Ìïë
        self.period_labels = {
            '1mo': '1Í∞úÏõî',
            '3mo': '3Í∞úÏõî', 
            '6mo': '6Í∞úÏõî',
            '1y': '1ÎÖÑ',
            '2y': '2ÎÖÑ',
            '5y': '5ÎÖÑ'
        }
        
        # Í∏∞Í∞ÑÎ≥Ñ ÏùºÏàò Îß§Ìïë
        self.period_days = {
            '1mo': 30,
            '3mo': 90,
            '6mo': 180,
            '1y': 365,
            '2y': 730,
            '5y': 1825
        }
    
    def _get_sector_symbols(self, sector_type):
        """ÏÑπÌÑ∞Î≥Ñ Ï£ºÏöî Í∏∞ÏóÖ Ïã¨Î≥º Í∞ÄÏ†∏Ïò§Í∏∞"""
        sector_symbols = {
            'AEROSPACE': [
                # Ïö∞Ï£ºÌï≠Í≥µ Í∏∞ÏóÖÎì§
                'BA', 'LMT', 'RTX', 'NOC', 'GD', 'LHX', 'TDG', 'HWM', 'LDOS', 'KTOS',
                'AVAV', 'RKLB', 'SPCE', 'ASTR', 'BLDE', 'JOBY', 'EVTL', 'LILM', 'ACHR',
                'MAXR', 'SPIR', 'IRDM', 'VSAT', 'GSAT', 'ASTS', 'ORBC', 'GILT',
                'CAT', 'HON', 'TXT', 'PH', 'ITT', 'CW', 'MOG-A'
            ],
            'QUANTUM': [
                # ÏñëÏûêÏª¥Ìì®ÌÑ∞ Í¥ÄÎ†® Í∏∞ÏóÖÎì§
                'IBM', 'GOOGL', 'MSFT', 'NVDA', 'INTC', 'AMD', 'QCOM', 'MRVL',
                'IONQ', 'RGTI', 'QUBT', 'ARQQ', 'QTUM', 'DEFN', 'AMZN', 'CRM',
                'ORCL', 'CSCO', 'TSM', 'ASML', 'KLAC', 'LRCX', 'AMAT', 'TXN'
            ],
            'LONGEVITY': [
                # ÎÖ∏ÌôîÏó≠Ï†Ñ/Ïû•Ïàò Í∏∞ÏóÖÎì§
                'GILD', 'AMGN', 'REGN', 'VRTX', 'BIIB', 'MRNA', 'NVAX', 'BNTX', 'ILMN',
                'TMO', 'DHR', 'A', 'DXCM', 'ISRG', 'VEEV', 'BSX', 'MDT', 'ABT',
                'JNJ', 'PFE', 'ABBV', 'LLY', 'BMY', 'MRK', 'GSK', 'NVO', 'AZN',
                'UNITY', 'SEER', 'TWST', 'CRSP', 'EDIT', 'NTLA', 'BEAM', 'VERV'
            ],
            'SYNTHETIC_BIO': [
                # Ìï©ÏÑ±ÏÉùÎ¨ºÌïô Í∏∞ÏóÖÎì§
                'TWST', 'CRSP', 'EDIT', 'NTLA', 'BEAM', 'VERV', 'SEER', 'UNITY', 'FATE',
                'BLUE', 'GILD', 'MRNA', 'BNTX', 'NVAX', 'DNA', 'SYN', 'AMRS',
                'CODX', 'PACB', 'ILMN', 'TMO', 'DHR', 'A', 'LIFE', 'BIO', 'CDNA',
                'FOLD', 'RGNX', 'SGEN', 'HALO', 'EVGN', 'CYTK', 'ABUS', 'IMUX'
            ],
            'STABLECOIN': [
                # Ïä§ÌÖåÏù¥Î∏îÏΩîÏù∏/ÏïîÌò∏ÌôîÌèê Í¥ÄÎ†® Í∏∞ÏóÖÎì§
                'COIN', 'MSTR', 'RIOT', 'MARA', 'CLSK', 'BITF', 'HUT', 'CAN', 'BTBT',
                'SQ', 'PYPL', 'MA', 'V', 'NVDA', 'AMD', 'TSLA', 'HOOD', 'SOFI',
                'AFRM', 'UPST', 'LC', 'GBTC', 'ETHE', 'LTCN', 'BITO', 'ARKK'
            ],
            'DATACENTER_COOLING': [
                # Îç∞Ïù¥ÌÑ∞ÏÑºÌÑ∞ ÎÉâÍ∞ÅÍ∏∞Ïà† Í∏∞ÏóÖÎì§
                'NVDA', 'AMD', 'INTC', 'QCOM', 'MRVL', 'AMAT', 'LRCX', 'KLAC',
                'JCI', 'CARR', 'ITW', 'EMR', 'HON', 'DHR', 'TMO', 'WAT', 'XYL',
                'VLTO', 'CGNX', 'TER', 'KEYS', 'NOVT', 'NDSN', 'HUBB',
                'AAON', 'SMTC', 'EVTC', 'DLR', 'EQIX', 'AMT'
            ],
            'BCI': [
                # Îáå-Ïª¥Ìì®ÌÑ∞ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§(BCI) Í∏∞ÏóÖÎì§
                'NVDA', 'GOOGL', 'MSFT', 'META', 'AAPL', 'TSLA', 'NEGG', 'SNAP', 'MRNA',
                'ILMN', 'TMO', 'DHR', 'A', 'ISRG', 'VEEV', 'BSX', 'MDT', 'ABT',
                'JNJ', 'DXCM', 'CTRL', 'NURO', 'SYNC', 'LFMD', 'AXGN', 'PRTS',
                'GMED', 'KALA', 'INVA', 'PHVS', 'SENS', 'CRMD', 'KRYS', 'ATNF'
            ],
            'FUTURE_LEADERS': [
                # ÎØ∏Îûò ÎåÄÏû•Ï£º ÌõÑÎ≥¥Îì§ (Í∞Å ÏÑπÌÑ∞Ïùò ÏµúÍ≥† Ïú†ÎßùÏ£ºÎßå ÏÑ†Î≥Ñ)
                # üöÄ Ïö∞Ï£ºÌï≠Í≥µ ÎåÄÏû•Ï£º
                'RKLB', 'SPCE', 'BA', 'LMT', 'RTX', 'NOC', 'MAXR', 'ASTS',
                # ‚öõÔ∏è ÏñëÏûêÏª¥Ìì®ÌÑ∞ ÎåÄÏû•Ï£º  
                'IONQ', 'RGTI', 'QUBT', 'IBM', 'GOOGL', 'NVDA', 'MSFT',
                # üß¨ ÎÖ∏ÌôîÏó≠Ï†Ñ/Ïû•Ïàò ÎåÄÏû•Ï£º
                'UNITY', 'CRSP', 'EDIT', 'NTLA', 'BEAM', 'VERV', 'TWST', 'GILD', 'MRNA',
                # üî¨ Ìï©ÏÑ±ÏÉùÎ¨ºÌïô ÎåÄÏû•Ï£º
                'DNA', 'TWST', 'AMRS', 'CRSP', 'EDIT', 'FATE', 'BLUE', 'SYN',
                # üí∞ Ïä§ÌÖåÏù¥Î∏îÏΩîÏù∏/ÏïîÌò∏ÌôîÌèê ÎåÄÏû•Ï£º
                'COIN', 'MSTR', 'RIOT', 'MARA', 'CLSK', 'SQ', 'PYPL', 'HOOD',
                # ‚ùÑÔ∏è Îç∞Ïù¥ÌÑ∞ÏÑºÌÑ∞ ÎÉâÍ∞Å ÎåÄÏû•Ï£º
                'NVDA', 'AMD', 'JCI', 'CARR', 'XYL', 'SMTC', 'DLR', 'EQIX',
                # üß† BCI ÎåÄÏû•Ï£º
                'NVDA', 'TSLA', 'META', 'GOOGL', 'ISRG', 'DXCM', 'BSX', 'SYNC',
                # ü§ñ AI/Î°úÎ¥á ÎåÄÏû•Ï£º
                'NVDA', 'AMD', 'GOOGL', 'MSFT', 'TSLA', 'META', 'PLTR', 'C3AI'
            ]
        }
        
        return sector_symbols.get(sector_type, [])
        
    def _get_sp500_symbols_full(self):
        """S&P 500 Ï†ÑÏ≤¥ Í∏∞ÏóÖ Î¶¨Ïä§Ìä∏ (500Í∞ú)"""
        return [
            'AAPL', 'MSFT', 'GOOGL', 'GOOG', 'AMZN', 'NVDA', 'META', 'BRK-B', 'LLY', 'AVGO', 
            'UNH', 'JPM', 'XOM', 'V', 'PG', 'JNJ', 'MA', 'HD', 'CVX', 'ABBV',
            'PFE', 'BAC', 'KO', 'COST', 'TMO', 'WMT', 'CSCO', 'DIS', 'ABT', 'DHR',
            'MRK', 'ADBE', 'CRM', 'NFLX', 'INTC', 'AMD', 'QCOM', 'IBM', 'GE', 'BA',
            'CAT', 'HON', 'RTX', 'GS', 'MS', 'VZ', 'CMCSA', 'NKE', 'ORCL', 'PEP',
            'TXN', 'PM', 'T', 'AMGN', 'COP', 'UNP', 'NEE', 'LOW', 'TMUS', 'AMAT',
            'ISRG', 'BKNG', 'VRTX', 'ADP', 'SBUX', 'GILD', 'ADI', 'LRCX', 'MDLZ', 'REGN',
            'PYPL', 'KLAC', 'MRVL', 'ORLY', 'CDNS', 'SNPS', 'NXPI', 'WDAY', 'ABNB', 'FTNT',
            'DDOG', 'TEAM', 'ZM', 'CRWD', 'ZS', 'OKTA', 'DOCU', 'NOW', 'PANW', 'MU',
            'ANET', 'LULU', 'ODFL', 'EXC', 'CTAS', 'ROST', 'TJX', 'MCD', 'YUM', 'CMG',
            'MMC', 'ACN', 'LIN', 'SPGI', 'TFC', 'BLK', 'AON', 'ICE', 'COF', 'FI',
            'BSX', 'SO', 'PLD', 'DUK', 'SCHW', 'CL', 'CB', 'USB', 'BMY', 'DE',
            'HCA', 'NSC', 'APH', 'SYK', 'ZTS', 'PNC', 'CI', 'WM', 'EQIX', 'CCI',
            'AMT', 'MCO', 'ITW', 'TGT', 'FISV', 'CSX', 'BDX', 'NOC', 'FCX', 'SHW',
            'GD', 'EMR', 'PGR', 'GM', 'MCK', 'AJG', 'TRV', 'PSA', 'WELL',
            'ECL', 'ROP', 'CARR', 'ALL', 'AEP', 'WMB', 'CME', 'DLR', 'O', 'PCAR',
            'OKE', 'KMI', 'TEL', 'AIG', 'HLT', 'PSX', 'SPG', 'CTSH', 'PAYX', 'SRE',
            'F', 'AZO', 'MSI', 'CNC', 'MSCI', 'CMI', 'PRU', 'AFL', 'FAST', 'GWW',
            'RSG', 'KR', 'OTIS', 'CBRE', 'VRSK', 'ADSK', 'EA', 'CTVA', 'HUM', 'IDXX',
            'EW', 'XEL', 'DD', 'COIN', 'HPQ', 'DXCM', 'GRMN', 'WEC', 'GEHC', 'GLW',
            'KHC', 'ED', 'WBA', 'NDAQ', 'RMD', 'BK', 'DOW', 'AWK', 'ANSS', 'A',
            'EXR', 'IRM', 'FANG', 'PPG', 'CPRT', 'ROK', 'URI', 'MNST', 'SBAC', 'STZ',
            'DVN', 'IT', 'VICI', 'KEYS', 'MLM', 'ACGL', 'VMC', 'CHTR', 'MPWR',
            'EFX', 'BIIB', 'CDW', 'TROW', 'EBAY', 'NTAP', 'TSN', 'CSGP', 'WAB', 'HUBB'
        ]
    
    def _get_nasdaq_symbols_full(self):
        """NASDAQ Ï†ÑÏ≤¥ Ï£ºÏöî Í∏∞ÏóÖ Î¶¨Ïä§Ìä∏ (Ï£ºÏöî Í∏∞Ïà†Ï£º Ï§ëÏã¨ 400Í∞ú+)"""
        return [
            'AAPL', 'MSFT', 'GOOGL', 'GOOG', 'AMZN', 'NVDA', 'META', 'TSLA', 'AVGO', 'ADBE',
            'CRM', 'NFLX', 'INTC', 'AMD', 'QCOM', 'TMUS', 'AMAT', 'ISRG', 'BKNG', 'VRTX',
            'ADP', 'SBUX', 'GILD', 'ADI', 'LRCX', 'MDLZ', 'REGN', 'PYPL', 'KLAC', 'MRVL',
            'ORLY', 'CDNS', 'SNPS', 'NXPI', 'WDAY', 'ABNB', 'FTNT', 'DDOG', 'TEAM', 'ZM',
            'CRWD', 'ZS', 'OKTA', 'DOCU', 'NOW', 'PANW', 'MU', 'ANET', 'LULU', 'ODFL',
            'CPRT', 'CSCO', 'CTAS', 'FAST', 'VRSK', 'ADSK', 'EA', 'DXCM', 'GRMN', 'IDXX',
            'NDAQ', 'ANSS', 'MNST', 'MPWR', 'CDW', 'EBAY', 'NTAP', 'BIIB', 'CHTR', 'ALGN',
            'DLTR', 'SWKS', 'TTWO', 'SMCI', 'PODD', 'AKAM', 'FICO', 'ENPH', 'FSLR', 'JNPR',
            'MCHP', 'WDC', 'XRAY', 'CTXS', 'ULTA', 'FISV', 'PAYX', 'WBA', 'COST', 'FOX',
            'FOXA', 'MRNA', 'BMRN', 'TECH', 'ILMN', 'INCY', 'SIRI', 'PCTY', 'EXPD', 'MELI',
            'KDP', 'LCID', 'ROKU', 'HOOD', 'RIVN', 'SGEN', 'NTES', 'JD', 'PDD', 'BIDU',
            'SPLK', 'PTON', 'ZI', 'SHOP', 'SPOT', 'PLUG', 'FUBO', 'ZG',
            'UBER', 'LYFT', 'DASH', 'SNOW', 'RBLX', 'PLTR', 'COIN', 'SOFI', 'UPST',
            'AFRM', 'SQ', 'PINS', 'SNAP'
        ]
    
    def _get_us_market_cap_from_yahoo(self, market_type='SP500', limit=None):
        """ÎØ∏Íµ≠ ÏãúÍ∞ÄÏ¥ùÏï° ÏÉÅÏúÑ Ï¢ÖÎ™© Í∞ÄÏ†∏Ïò§Í∏∞ (Ï†ÑÏ≤¥ Î¶¨Ïä§Ìä∏ + ÏÑπÌÑ∞Î≥Ñ)"""
        try:
            print(f"[DEBUG] ÎØ∏Íµ≠ {market_type} Ï¢ÖÎ™© Ï°∞Ìöå")
            
            if market_type == 'SP500':
                symbols = self._get_sp500_symbols_full()
            elif market_type == 'NASDAQ':
                symbols = self._get_nasdaq_symbols_full()
            elif market_type == 'ALL':
                # SP500Í≥º NASDAQ Ìï©ÏπòÍ∏∞ (Ï§ëÎ≥µ Ï†úÍ±∞)
                sp500 = self._get_sp500_symbols_full()
                nasdaq = self._get_nasdaq_symbols_full()
                symbols = list(set(sp500 + nasdaq))  # Ï§ëÎ≥µ Ï†úÍ±∞
            elif market_type in ['AEROSPACE', 'QUANTUM', 'LONGEVITY', 'SYNTHETIC_BIO', 'STABLECOIN', 'DATACENTER_COOLING', 'BCI', 'FUTURE_LEADERS']:
                # ÏÑπÌÑ∞Î≥Ñ Ï¢ÖÎ™© Í∞ÄÏ†∏Ïò§Í∏∞
                symbols = self._get_sector_symbols(market_type)
            else:
                symbols = self._get_sp500_symbols_full()
            
            if limit:
                symbols = symbols[:limit]
                
            print(f"[DEBUG] {market_type} Ï¥ù Ï¢ÖÎ™© Ïàò: {len(symbols)}")
            return symbols
            
        except Exception as e:
            print(f"[WARNING] ÎØ∏Íµ≠ {market_type} Ï°∞Ìöå Ïã§Ìå®: {e}")
            return None

    def get_top_companies_by_market_cap(self, market='SP500', limit=None):
        """ÏãúÍ∞ÄÏ¥ùÏï° Í∏∞Ï§Ä ÏÉÅÏúÑ Í∏∞ÏóÖ Í∞ÄÏ†∏Ïò§Í∏∞ (Ï†ÑÏ≤¥ ÎòêÎäî Ï†úÌïú + ÏÑπÌÑ∞Î≥Ñ)"""
        print(f"[DEBUG] ÏãúÍ∞ÄÏ¥ùÏï° Í∏∞ÏóÖ Ï°∞Ìöå ÏãúÏûë: market={market}, limit={limit}")
        
        try:
            companies = {}
            
            if market in ['SP500', 'NASDAQ', 'ALL', 'AEROSPACE', 'QUANTUM', 'LONGEVITY', 'SYNTHETIC_BIO', 'STABLECOIN', 'DATACENTER_COOLING', 'BCI', 'FUTURE_LEADERS']:
                # ÎØ∏Íµ≠ Ï¢ÖÎ™©ÏùÄ ÌïòÎìúÏΩîÎî©Îêú ÌöåÏÇ¨Î™Ö ÏÇ¨Ïö©
                us_symbols = self._get_us_market_cap_from_yahoo(market, limit)
                if us_symbols:
                    # ÌïòÎìúÏΩîÎî©Îêú ÌöåÏÇ¨Î™Ö Îß§Ìïë ÏÇ¨Ïö©
                    company_names = self._get_us_company_names()
                    # ÏÑπÌÑ∞Î≥Ñ ÌöåÏÇ¨Î™Ö Îß§Ìïë Ï∂îÍ∞Ä
                    sector_company_names = self._get_sector_company_names()
                    company_names.update(sector_company_names)
                    
                    for symbol in us_symbols:
                        companies[symbol] = company_names.get(symbol, symbol)
        
            elif market in ['KOSPI', 'KOSDAQ']:
                # ÌïúÍµ≠ Ï¢ÖÎ™©ÏùÄ Î≥ëÎ†¨ Ï≤òÎ¶¨Î°ú ÌöåÏÇ¨Î™Ö Í∞ÄÏ†∏Ïò§Í∏∞
                korea_symbols = self._get_korea_market_cap_from_naver(market, limit or 50)
                if korea_symbols:
                    # Î≥ëÎ†¨ Ï≤òÎ¶¨Î°ú ÌöåÏÇ¨Î™Ö Í∞ÄÏ†∏Ïò§Í∏∞
                    companies = self._get_korea_company_names_parallel(korea_symbols)
            
            print(f"[DEBUG] ÏµúÏ¢Ö Ï¢ÖÎ™© Ïàò: {len(companies)}Í∞ú")
            return companies
            
        except Exception as e:
            print(f"[ERROR] ÏãúÍ∞ÄÏ¥ùÏï° Ï°∞Ìöå Ï§ë Ïò§Î•ò: {e}")
            return {}
    
    def _get_korea_market_cap_from_naver(self, market_type='KOSPI', limit=50):
        """ÎÑ§Ïù¥Î≤Ñ Í∏àÏúµÏóêÏÑú ÌïúÍµ≠ ÏãúÍ∞ÄÏ¥ùÏï° ÏàúÏúÑ Í∞ÄÏ†∏Ïò§Í∏∞"""
        try:
            print(f"[DEBUG] ÎÑ§Ïù¥Î≤Ñ Í∏àÏúµÏóêÏÑú {market_type} ÏãúÍ∞ÄÏ¥ùÏï° ÏàúÏúÑ Ï°∞Ìöå ÏãúÎèÑ")
            
            all_codes = []
            page = 1
            
            # KOSPIÏôÄ KOSDAQ URL Íµ¨Î∂Ñ
            if market_type == 'KOSPI':
                base_url = "https://finance.naver.com/sise/sise_market_sum.nhn"
            elif market_type == 'KOSDAQ':
                base_url = "https://finance.naver.com/sise/sise_market_sum.nhn?sosok=1"
            else:
                base_url = "https://finance.naver.com/sise/sise_market_sum.nhn"
            
            while len(all_codes) < limit and page <= 2:  # ÌéòÏù¥ÏßÄ Ïàò Ï§ÑÏûÑ
                url = f"{base_url}?&page={page}"
                
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }
                
                response = requests.get(url, headers=headers, timeout=10)
                response.raise_for_status()
                
                # Ï†ïÍ∑úÌëúÌòÑÏãùÏúºÎ°ú ÏßÅÏ†ë Ï¢ÖÎ™©ÏΩîÎìú Ï∂îÏ∂ú
                pattern = r'/item/main\.naver\?code=(\d{6})'
                matches = re.findall(pattern, response.text)
                
                # Ï§ëÎ≥µ Ï†úÍ±∞ÌïòÎ©¥ÏÑú Ï∂îÍ∞Ä
                all_codes.extend(matches)
                all_codes = list(dict.fromkeys(all_codes))  # ÏàúÏÑú Ïú†ÏßÄÌïòÎ©¥ÏÑú Ï§ëÎ≥µ Ï†úÍ±∞
                page += 1
            
            # limit Í∞úÏàòÎßåÌÅº ÏÑ†ÌÉùÌïòÍ≥† .KS Î∂ôÏù¥Í∏∞
            symbols = [f"{code}.KS" for code in all_codes[:limit]]
            
            print(f"[DEBUG] ÎÑ§Ïù¥Î≤ÑÏóêÏÑú {len(symbols)}Í∞ú {market_type} Ï¢ÖÎ™© Ï∂îÏ∂ú ÏÑ±Í≥µ")
            return symbols
            
        except Exception as e:
            print(f"[WARNING] ÎÑ§Ïù¥Î≤Ñ Í∏àÏúµ {market_type} Ï°∞Ìöå Ïã§Ìå®: {e}")
            return None
        
    def get_period_days(self, period):
        """Í∏∞Í∞ÑÏùÑ ÏùºÏàòÎ°ú Î≥ÄÌôò"""
        return self.period_days.get(period, 180)
    
    def _get_extended_period_for_ma(self, period):
        """125Ïùº Ïù¥ÎèôÌèâÍ∑†ÏÑ†ÏùÑ ÏúÑÌïú ÌôïÏû•Îêú Í∏∞Í∞Ñ Í≥ÑÏÇ∞"""
        extended_periods = {
            '1mo': '1y',    # 1Í∞úÏõî ÌëúÏãú ‚Üí 1ÎÖÑ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
            '3mo': '1y',    # 3Í∞úÏõî ÌëúÏãú ‚Üí 1ÎÖÑ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞  
            '6mo': '2y',    # 6Í∞úÏõî ÌëúÏãú ‚Üí 2ÎÖÑ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
            '1y': '3y',     # 1ÎÖÑ ÌëúÏãú ‚Üí 3ÎÖÑ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
            '2y': '5y',     # 2ÎÖÑ ÌëúÏãú ‚Üí 5ÎÖÑ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
            '5y': 'max'     # 5ÎÖÑ ÌëúÏãú ‚Üí ÏµúÎåÄ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        }
        return extended_periods.get(period, '2y')
        
    def get_fear_greed_index(self, period='6mo'):
        """CNN Fear & Greed Index Í∞ÄÏ†∏Ïò§Í∏∞"""
        try:
            self.current_period = period  # ÌòÑÏû¨ Í∏∞Í∞Ñ Ï†ÄÏû•
            
            # ÌòÑÏû¨ Í≥µÌè¨ & ÌÉêÏöï ÏßÄÏàò
            fear_greed_data = get()
            self.fear_greed_current = fear_greed_data.value
            self.fear_greed_label = fear_greed_data.description
            
            print(f"[DEBUG] Í≥µÌè¨ÌÉêÏöïÏßÄÏàò ÏàòÏã† ÏÑ±Í≥µ: {self.fear_greed_current}")
            
        except Exception as e:
            print(f"Fear & Greed Index Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®: {e}")
            self.fear_greed_current = 50.0
            self.fear_greed_label = "Neutral"
        
        try:
            # CNNÏóêÏÑú Ïã§Ï†ú Í≥ºÍ±∞ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
            self.fear_greed_history = self._get_real_fear_greed_history(period)
            if self.fear_greed_history is not None:
                print(f"[DEBUG] Í≥µÌè¨ÌÉêÏöïÏßÄÏàò ÌûàÏä§ÌÜ†Î¶¨ ÏÉùÏÑ± ÏôÑÎ£å: {len(self.fear_greed_history)}Í∞ú Îç∞Ïù¥ÌÑ∞")
            else:
                print("[WARNING] CNN ÌûàÏä§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®")
                
        except Exception as e:
            print(f"Í≥µÌè¨ÌÉêÏöïÏßÄÏàò ÌûàÏä§ÌÜ†Î¶¨ ÏÉùÏÑ± Ïã§Ìå®: {e}")
            self.fear_greed_history = None
                
        return self.fear_greed_current
    
    def _get_real_fear_greed_history(self, period='6mo'):
        """Ïã§Ï†ú CNN Fear & Greed Index Í≥ºÍ±∞ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞"""
        try:
            # CNN Fear & Greed Index API ÏóîÎìúÌè¨Ïù∏Ìä∏
            days = self.get_period_days(period)
            url = f"https://production.dataviz.cnn.io/index/fearandgreed/graphdata?start=0&end={days}"
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            if 'fear_and_greed_historical' in data:
                scores = data['fear_and_greed_historical']
                
                # Îç∞Ïù¥ÌÑ∞ÌîÑÎ†àÏûÑÏúºÎ°ú Î≥ÄÌôò
                df = pd.DataFrame(scores['data'])
                df['x'] = pd.to_datetime(df['x'], unit='ms')
                df = df.rename(columns={'x': 'Date', 'y': 'Value'})
                df = df[['Date', 'Value']]
                
                return df
                
        except Exception as e:
            print(f"[WARNING] CNN API Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®: {e}")
            return None
    
    def get_fear_greed_chart(self):
        """Í≥µÌè¨ & ÌÉêÏöï ÏßÄÏàò Ï∞®Ìä∏ ÏÉùÏÑ±"""
        period = getattr(self, 'current_period', '6mo')  # ÌòÑÏû¨ ÏÑ§Ï†ïÎêú Í∏∞Í∞Ñ ÏÇ¨Ïö©
        
        if self.fear_greed_history is None:
            return go.Figure()
        
        fig = go.Figure()
        
        # Í≥µÌè¨ & ÌÉêÏöï ÏßÄÏàò ÎùºÏù∏
        fig.add_trace(go.Scatter(
            x=self.fear_greed_history['Date'],
            y=self.fear_greed_history['Value'],
            mode='lines',
            name='Fear & Greed Index',
            line=dict(color='purple', width=2),
            fill='tonexty'
        ))
        
        # Íµ¨Í∞ÑÎ≥Ñ ÏÉâÏÉÅ ÏòÅÏó≠ Ï∂îÍ∞Ä
        fig.add_hline(y=75, line=dict(color="red", width=1, dash="dash"), 
                      annotation_text="Í∑πÎèÑÏùò ÌÉêÏöï")
        fig.add_hline(y=55, line=dict(color="orange", width=1, dash="dash"), 
                      annotation_text="ÌÉêÏöï")
        fig.add_hline(y=45, line=dict(color="gray", width=1, dash="dash"), 
                      annotation_text="Ï§ëÎ¶Ω")
        fig.add_hline(y=25, line=dict(color="blue", width=1, dash="dash"), 
                      annotation_text="Í≥µÌè¨")
        
        # ÌòÑÏû¨Í∞í Ìè¨Ïù∏Ìä∏ Ï∂îÍ∞Ä
        if self.fear_greed_current and self.fear_greed_history is not None and not self.fear_greed_history.empty:
            fig.add_trace(go.Scatter(
                x=[self.fear_greed_history['Date'].iloc[-1]],
                y=[self.fear_greed_current],
                mode='markers',
                marker=dict(color='red', size=10),
                name=f'ÌòÑÏû¨: {self.fear_greed_current:.1f}'
            ))
        
        period_label = self.period_labels.get(period, period)
        
        fig.update_layout(
            title=f"Í≥µÌè¨ & ÌÉêÏöï ÏßÄÏàò ({period_label})",
            xaxis_title="ÎÇ†Ïßú",
            yaxis_title="ÏßÄÏàò",
            height=300,
            showlegend=True,
            # plot_bgcolor='white',
            # paper_bgcolor='white',
            xaxis=dict(gridcolor='lightgray'),
            yaxis=dict(range=[0, 100], gridcolor='lightgray'),
            margin=dict(t=40, b=40, l=50, r=50)
        )
        
        return fig
    
    def calculate_moving_averages(self, df):
        """Ïù¥ÎèôÌèâÍ∑†ÏÑ† Í≥ÑÏÇ∞"""
        df['MA20'] = df['Close'].rolling(window=20).mean()
        df['MA60'] = df['Close'].rolling(window=60).mean()
        df['MA125'] = df['Close'].rolling(window=125).mean()
        return df
    
    def check_golden_cross(self, df):
        """Í≥®Îì†ÌÅ¨Î°úÏä§ ÌôïÏù∏ - ÏµúÍ∑º 10Ïùº ÎÇ¥Ïóê Î∞úÏÉùÌñàÎäîÏßÄ ÌôïÏù∏"""
        if len(df) < 10:
            return False, None
        
        # ÏµúÍ∑º 10ÏùºÍ∞ÑÏùò Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
        recent_data = df.tail(10)
        
        for i in range(1, len(recent_data)):
            current_20 = recent_data['MA20'].iloc[i]
            current_60 = recent_data['MA60'].iloc[i]
            current_125 = recent_data['MA125'].iloc[i]
            prev_20 = recent_data['MA20'].iloc[i-1]
            prev_60 = recent_data['MA60'].iloc[i-1]
            
            # Í≥®Îì†ÌÅ¨Î°úÏä§ Ï°∞Í±¥:
            # 1. Ïù¥Ï†ÑÏóêÎäî 20ÏùºÏÑ†Ïù¥ 60ÏùºÏÑ† ÏïÑÎûò
            # 2. ÌòÑÏû¨Îäî 20ÏùºÏÑ†Ïù¥ 60ÏùºÏÑ† ÏúÑ
            # 3. Îëê Ïù¥ÎèôÌèâÍ∑†ÏÑ†Ïù¥ Î™®Îëê 125ÏùºÏÑ† ÏïÑÎûòÏóê ÏûàÏñ¥Ïïº Ìï®
            golden_cross = (
                (prev_20 <= prev_60) and  # Ïù¥Ï†Ñ: 20ÏùºÏÑ†Ïù¥ 60ÏùºÏÑ† ÏïÑÎûò
                (current_20 > current_60) and  # ÌòÑÏû¨: 20ÏùºÏÑ†Ïù¥ 60ÏùºÏÑ† ÏúÑ
                (current_20 < current_125) and  # 20ÏùºÏÑ†Ïù¥ 125ÏùºÏÑ† ÏïÑÎûò
                (current_60 < current_125)  # 60ÏùºÏÑ†Ïù¥ 125ÏùºÏÑ† ÏïÑÎûò
            )
            
            if golden_cross:
                cross_date = recent_data.index[i]
                return True, cross_date
        
        return False, None
    
    def check_above_ma_lines(self, df):
        """ÌòÑÏû¨ Í∞ÄÍ≤©Ïù¥ 20ÏùºÏÑ†, 60ÏùºÏÑ† ÏúÑÏóê ÏûàÎäîÏßÄ ÌôïÏù∏"""
        if len(df) < 1:
            return False
        
        current_price = df['Close'].iloc[-1]
        ma20 = df['MA20'].iloc[-1]
        ma60 = df['MA60'].iloc[-1]
        
        # ÌòÑÏû¨Í∞ÄÍ∞Ä 20ÏùºÏÑ†, 60ÏùºÏÑ† ÏúÑÏóê ÏûàÎäîÏßÄ ÌôïÏù∏
        return current_price > ma20 and current_price > ma60
    
    def check_ma125_support(self, df):
        """125ÏùºÏÑ† ÏúÑÏóêÏÑú 2Í∞ú Ïù¥ÏÉÅ Ï∫îÎì§Ïù¥ ÏßÄÏßÄÌïòÎäîÏßÄ ÌôïÏù∏"""
        if len(df) < 2:
            return False, 0
        
        # ÏµúÍ∑º 5Í∞ú Ï∫îÎì§ ÌôïÏù∏
        recent_candles = df.tail(5)
        support_count = 0
        
        for i in range(len(recent_candles)):
            candle_low = recent_candles['Low'].iloc[i]
            candle_high = recent_candles['High'].iloc[i]
            candle_close = recent_candles['Close'].iloc[i]
            candle_open = recent_candles['Open'].iloc[i]
            ma125 = recent_candles['MA125'].iloc[i]
            
            # Ï∫îÎì§ Î™∏ÌÜµÏù¥ 125ÏùºÏÑ† ÏúÑÏóê ÏûàÎäîÏßÄ ÌôïÏù∏
            candle_body_low = min(candle_open, candle_close)
            if candle_body_low > ma125:
                support_count += 1
        
        return support_count >= 2, support_count
    
    def check_trend_stability(self, df):
        """Ï∂îÏÑ∏ ÏïàÏ†ïÏÑ± ÌôïÏù∏ (ÏßÄÍ∑∏Ïû¨Í∑∏ ÏõÄÏßÅÏûÑÏù¥ ÏïÑÎãå ÏïàÏ†ïÏ†Å ÏÉÅÏäπ)"""
        if len(df) < 10:
            return False
        
        # ÏµúÍ∑º 10ÏùºÍ∞ÑÏùò Ïù¥ÎèôÌèâÍ∑†ÏÑ† Í∏∞Ïö∏Í∏∞ ÌôïÏù∏
        recent_ma20 = df['MA20'].tail(10)
        recent_ma60 = df['MA60'].tail(10)
        
        # 20ÏùºÏÑ†, 60ÏùºÏÑ†Ïù¥ ÏÉÅÏäπ Ï∂îÏÑ∏Ïù∏ÏßÄ ÌôïÏù∏
        ma20_slope = (recent_ma20.iloc[-1] - recent_ma20.iloc[0]) / 10
        ma60_slope = (recent_ma60.iloc[-1] - recent_ma60.iloc[0]) / 10
        
        # Îëò Îã§ ÏÉÅÏäπ Ï∂îÏÑ∏Î©¥ÏÑú 20ÏùºÏÑ†Ïù¥ 60ÏùºÏÑ† ÏúÑÏóê ÏûàÏñ¥Ïïº Ìï®
        return ma20_slope > 0 and ma60_slope > 0 and recent_ma20.iloc[-1] > recent_ma60.iloc[-1]
    
    def analyze_stock(self, symbol, period='6mo', symbols_dict=None):
        """Ï¢ÖÎ™© Î∂ÑÏÑù"""
        try:
            print(f"[DEBUG] analyze_stock Ìò∏Ï∂ú: {symbol}, period={period}")
            
            # Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
            stock = yf.Ticker(symbol)
            
            # Ï∂©Î∂ÑÌïú Îç∞Ïù¥ÌÑ∞Î•º ÏúÑÌï¥ Îçî Í∏¥ Í∏∞Í∞ÑÏúºÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞
            extended_period = self._get_extended_period_for_ma(period)
            df_full = stock.history(period=extended_period)
            
            print(f"[DEBUG] {symbol} Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ ÏàòÏã†: {len(df_full)}Ìñâ, Í∏∞Í∞Ñ={extended_period}")
            
            if df_full.empty:
                print(f"[WARNING] {symbol} Îç∞Ïù¥ÌÑ∞Í∞Ä ÎπÑÏñ¥ÏûàÏùå")
                return None
            
            # Ïù¥ÎèôÌèâÍ∑†ÏÑ† Í≥ÑÏÇ∞ (Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞Î°ú)
            df_full = self.calculate_moving_averages(df_full)
            
            # ÏÑ†ÌÉùÎêú Í∏∞Í∞ÑÎßåÌÅº Îç∞Ïù¥ÌÑ∞ ÏûêÎ•¥Í∏∞ (ÌëúÏãúÏö©)
            days_to_show = self.get_period_days(period)
            if len(df_full) > days_to_show:
                df_display = df_full.tail(days_to_show).copy()
            else:
                df_display = df_full.copy()
            
            print(f"[DEBUG] {symbol} ÌëúÏãúÏö© Îç∞Ïù¥ÌÑ∞: {len(df_display)}Ìñâ")
            
            # ÌöåÏÇ¨Î™Ö Í∞ÄÏ†∏Ïò§Í∏∞
            company_name = self.get_company_name(symbol, symbols_dict)
            
            # Í∞Å Ï°∞Í±¥ ÌôïÏù∏ (ÌëúÏãúÏö© Îç∞Ïù¥ÌÑ∞Î°ú)
            golden_cross, cross_date = self.check_golden_cross(df_display)
            above_ma_lines = self.check_above_ma_lines(df_display)
            ma125_support, support_count = self.check_ma125_support(df_display)
            trend_stable = self.check_trend_stability(df_display)
            
            # ÌòÑÏû¨ Í∞ÄÍ≤© Ï†ïÎ≥¥
            current_price = df_display['Close'].iloc[-1]
            
            # Ï¢ÖÌï© Ï†êÏàò Í≥ÑÏÇ∞
            score = 0
            if golden_cross:
                score += 25
            if above_ma_lines:
                score += 25
            if ma125_support:
                score += 25
            if trend_stable:
                score += 25
            
            # Í∏∞Í∞ÑÎ≥Ñ ÎùºÎ≤® Ï∂îÍ∞Ä
            period_label = self.period_labels.get(period, period)
            
            analysis_result = {
                'symbol': symbol,
                'company_name': company_name,
                'current_price': current_price,
                'golden_cross': golden_cross,
                'cross_date': cross_date,
                'above_ma_lines': above_ma_lines,
                'ma125_support': ma125_support,
                'support_count': support_count,
                'trend_stable': trend_stable,
                'score': score,
                'data': df_display,  # ÌëúÏãúÏö© Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
                'period': period,
                'period_label': period_label,
                'data_days': len(df_display)
            }
            
            return analysis_result
            
        except Exception as e:
            print(f"[ERROR] {symbol} Î∂ÑÏÑù Ï§ë Ïò§Î•ò: {str(e)}")
            return None
    
    def get_company_name(self, symbol, symbols_dict=None):
        """ÌöåÏÇ¨Î™Ö Í∞ÄÏ†∏Ïò§Í∏∞"""
        if symbols_dict and symbol in symbols_dict:
            return symbols_dict[symbol]
        
        # symbols_dictÍ∞Ä ÏóÜÏúºÎ©¥ yfinanceÏóêÏÑú ÏßÅÏ†ë Í∞ÄÏ†∏Ïò§Í∏∞
        try:
            ticker = yf.Ticker(symbol)
            info = ticker.info
            return info.get('longName', info.get('shortName', symbol))
        except:
            return symbol
    
    def get_recommendations(self, market='ALL', period='6mo'):
        """Ï∂îÏ≤ú Ï¢ÖÎ™© Î¶¨Ïä§Ìä∏ Í∞ÄÏ†∏Ïò§Í∏∞ (Ï†ÑÏ≤¥ ÎòêÎäî Ï†úÌïú ÏóÜÏùå)"""
        print(f"[DEBUG] get_recommendations Ìò∏Ï∂ú: market={market}, period={period}")
        
        # ÌòÑÏû¨ Í∏∞Í∞Ñ Ï†ÄÏû•
        self.current_period = period
        
        # Ï†ÑÏ≤¥ Í∏∞ÏóÖ Í∞ÄÏ†∏Ïò§Í∏∞ (Ï†úÌïú ÏóÜÏùå)
        symbols = self.get_top_companies_by_market_cap(market, limit=None)
        
        print(f"[DEBUG] Î∂ÑÏÑùÌï† Ï¢ÖÎ™© Ïàò: {len(symbols)}")
        
        # Î≥ëÎ†¨ Ï≤òÎ¶¨Î°ú Î∂ÑÏÑù ÏàòÌñâ
        results = self._analyze_stocks_parallel(symbols, period)
        
        # Ï†êÏàòÏàúÏúºÎ°ú Ï†ïÎ†¨
        results.sort(key=lambda x: x['score'], reverse=True)
        
        print(f"[DEBUG] Î∂ÑÏÑù ÏôÑÎ£å: {len(results)}Í∞ú Ï¢ÖÎ™©")
        
        return results

    def _analyze_stocks_parallel(self, symbols, period):
        """Î≥ëÎ†¨ Ï≤òÎ¶¨Î°ú Ï£ºÏãù Î∂ÑÏÑù ÏàòÌñâ (ÎåÄÎüâ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ ÏµúÏ†ÅÌôî)"""
        results = []
        
        def analyze_single_stock(symbol):
            try:
                analysis = self.analyze_stock(symbol, period, symbols)
                return analysis
            except Exception as e:
                print(f"[ERROR] {symbol} Î∂ÑÏÑù Ï§ë Ïò§Î•ò: {str(e)}")
                return None
        
        # ÎåÄÎüâ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨Î•º ÏúÑÌïú Î∞∞Ïπò ÏãúÏä§ÌÖú
        batch_size = 20  # Î∞∞Ïπò ÌÅ¨Í∏∞
        symbol_list = list(symbols.keys())
        
        print(f"[DEBUG] Ï¥ù {len(symbol_list)}Í∞ú Ï¢ÖÎ™©ÏùÑ {batch_size}Í∞úÏî© Î∞∞ÏπòÎ°ú Ï≤òÎ¶¨")
        
        for i in range(0, len(symbol_list), batch_size):
            batch_symbols = symbol_list[i:i+batch_size]
            batch_results = []
            
            print(f"[DEBUG] Î∞∞Ïπò {i//batch_size + 1}/{(len(symbol_list)-1)//batch_size + 1} Ï≤òÎ¶¨ Ï§ë ({len(batch_symbols)}Í∞ú Ï¢ÖÎ™©)")
            
            # Î∞∞ÏπòÎ≥ÑÎ°ú Î≥ëÎ†¨ Ï≤òÎ¶¨
            with ThreadPoolExecutor(max_workers=8) as executor:  # ÏõåÏª§ Ïàò Ï¶ùÍ∞Ä
                future_to_symbol = {executor.submit(analyze_single_stock, symbol): symbol for symbol in batch_symbols}
                
                # ÏôÑÎ£åÎêú ÏûëÏóÖÎ∂ÄÌÑ∞ Í≤∞Í≥º ÏàòÏßë
                for future in as_completed(future_to_symbol, timeout=180):  # 3Î∂Ñ ÌÉÄÏûÑÏïÑÏõÉ
                    symbol = future_to_symbol[future]
                    try:
                        analysis = future.result(timeout=60)  # Í∞Å ÏûëÏóÖÎãπ 1Î∂Ñ ÌÉÄÏûÑÏïÑÏõÉ
                        if analysis:
                            batch_results.append(analysis)
                    except Exception as e:
                        print(f"[ERROR] {symbol} Í≤∞Í≥º Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò: {str(e)}")
            
            results.extend(batch_results)
            print(f"[DEBUG] Î∞∞Ïπò ÏôÑÎ£å: {len(batch_results)}Í∞ú ÏÑ±Í≥µ, ÎàÑÏ†Å {len(results)}Í∞ú")
            
            # Î∞∞Ïπò Í∞Ñ Ïû†Ïãú ÎåÄÍ∏∞ (API Ï†úÌïú Î∞©ÏßÄ)
            if i + batch_size < len(symbol_list):
                time.sleep(1)
        
        return results

    def _get_us_company_names(self):
        """ÎØ∏Íµ≠ Í∏∞ÏóÖÎ™Ö ÌïòÎìúÏΩîÎî© (ÌôïÏû•Îêú Î≤ÑÏ†Ñ)"""
        return {
            # Í∏∞Ï°¥ Í∏∞ÏóÖÎì§
            'AAPL': 'Apple Inc.', 'MSFT': 'Microsoft Corp.', 'GOOGL': 'Alphabet Inc. Class A',
            'GOOG': 'Alphabet Inc. Class C', 'AMZN': 'Amazon.com Inc.', 'NVDA': 'NVIDIA Corp.', 
            'META': 'Meta Platforms Inc.', 'TSLA': 'Tesla Inc.', 'BRK-B': 'Berkshire Hathaway Inc.',
            'LLY': 'Eli Lilly and Co.', 'AVGO': 'Broadcom Inc.', 'UNH': 'UnitedHealth Group Inc.',
            'JPM': 'JPMorgan Chase & Co.', 'XOM': 'Exxon Mobil Corp.', 'V': 'Visa Inc.',
            'PG': 'Procter & Gamble Co.', 'JNJ': 'Johnson & Johnson', 'MA': 'Mastercard Inc.',
            'HD': 'Home Depot Inc.', 'CVX': 'Chevron Corp.', 'ABBV': 'AbbVie Inc.',
            'PFE': 'Pfizer Inc.', 'BAC': 'Bank of America Corp.', 'KO': 'Coca-Cola Co.',
            'COST': 'Costco Wholesale Corp.', 'TMO': 'Thermo Fisher Scientific Inc.', 'WMT': 'Walmart Inc.',
            'CSCO': 'Cisco Systems Inc.', 'DIS': 'Walt Disney Co.', 'ABT': 'Abbott Laboratories',
            'DHR': 'Danaher Corp.', 'MRK': 'Merck & Co. Inc.', 'ADBE': 'Adobe Inc.',
            'CRM': 'Salesforce Inc.', 'NFLX': 'Netflix Inc.', 'INTC': 'Intel Corp.',
            'AMD': 'Advanced Micro Devices Inc.', 'QCOM': 'Qualcomm Inc.', 'IBM': 'International Business Machines Corp.',
            'GE': 'General Electric Co.', 'BA': 'Boeing Co.', 'CAT': 'Caterpillar Inc.',
            'HON': 'Honeywell International Inc.', 'RTX': 'Raytheon Technologies Corp.', 'GS': 'Goldman Sachs Group Inc.',
            'MS': 'Morgan Stanley', 'VZ': 'Verizon Communications Inc.', 'CMCSA': 'Comcast Corp.',
            'NKE': 'Nike Inc.', 'ORCL': 'Oracle Corp.', 'PEP': 'PepsiCo Inc.',
            'TXN': 'Texas Instruments Inc.', 'PM': 'Philip Morris International Inc.', 'T': 'AT&T Inc.',
            'AMGN': 'Amgen Inc.', 'COP': 'ConocoPhillips', 'UNP': 'Union Pacific Corp.',
            'NEE': 'NextEra Energy Inc.', 'LOW': "Lowe's Companies Inc.", 'TMUS': 'T-Mobile US Inc.',
            'AMAT': 'Applied Materials Inc.', 'ISRG': 'Intuitive Surgical Inc.', 'BKNG': 'Booking Holdings Inc.',
            'VRTX': 'Vertex Pharmaceuticals Inc.', 'ADP': 'Automatic Data Processing Inc.', 'SBUX': 'Starbucks Corp.',
            'GILD': 'Gilead Sciences Inc.', 'ADI': 'Analog Devices Inc.', 'LRCX': 'Lam Research Corp.',
            'MDLZ': 'Mondelez International Inc.', 'REGN': 'Regeneron Pharmaceuticals Inc.', 'PYPL': 'PayPal Holdings Inc.',
            'KLAC': 'KLA Corp.', 'MRVL': 'Marvell Technology Inc.', 'ORLY': "O'Reilly Automotive Inc.",
            'CDNS': 'Cadence Design Systems Inc.', 'SNPS': 'Synopsys Inc.', 'NXPI': 'NXP Semiconductors NV',
            'WDAY': 'Workday Inc.', 'ABNB': 'Airbnb Inc.', 'FTNT': 'Fortinet Inc.',
            'DDOG': 'Datadog Inc.', 'TEAM': 'Atlassian Corp.', 'ZM': 'Zoom Video Communications Inc.',
            'CRWD': 'CrowdStrike Holdings Inc.', 'ZS': 'Zscaler Inc.', 'OKTA': 'Okta Inc.',
            'DOCU': 'DocuSign Inc.', 'NOW': 'ServiceNow Inc.', 'PANW': 'Palo Alto Networks Inc.',
            'MU': 'Micron Technology Inc.', 'ANET': 'Arista Networks Inc.', 'LULU': 'Lululemon Athletica Inc.',
            'ODFL': 'Old Dominion Freight Line Inc.', 'EXC': 'Exelon Corp.', 'CTAS': 'Cintas Corp.',
            'ROST': 'Ross Stores Inc.', 'TJX': 'TJX Companies Inc.', 'MCD': "McDonald's Corp.",
            'YUM': 'Yum! Brands Inc.', 'CMG': 'Chipotle Mexican Grill Inc.'
        }

    def _get_sector_company_names(self):
        """ÏÑπÌÑ∞Î≥Ñ Í∏∞ÏóÖÎ™Ö Îß§Ìïë"""
        return {
            # Ïö∞Ï£ºÌï≠Í≥µ Ï∂îÍ∞Ä Í∏∞ÏóÖÎì§
            'LMT': 'Lockheed Martin Corp.', 'HWM': 'Howmet Aerospace Inc.', 'LHX': 'L3Harris Technologies Inc.',
            'RKLB': 'Rocket Lab USA Inc.', 'SPCE': 'Virgin Galactic Holdings Inc.', 'ASTR': 'Astra Space Inc.',
            'BLDE': 'Blade Air Mobility Inc.', 'JOBY': 'Joby Aviation Inc.', 'EVTL': 'Vertical Aerospace Ltd.',
            'LILM': 'Lilium N.V.', 'ACHR': 'Archer Aviation Inc.', 'MAXR': 'Maxar Technologies Inc.',
            'SPIR': 'Spire Global Inc.', 'IRDM': 'Iridium Communications Inc.', 'VSAT': 'Viasat Inc.',
            'GSAT': 'Globalstar Inc.', 'ASTS': 'AST SpaceMobile Inc.', 'ORBC': 'ORBCOMM Inc.',
            'GILT': 'Gilat Satellite Networks Ltd.', 'TXT': 'Textron Inc.', 'PH': 'Parker-Hannifin Corp.',
            'ITT': 'ITT Inc.', 'CW': 'Curtiss-Wright Corp.', 'MOG-A': 'Moog Inc.',
            
            # ÏñëÏûêÏª¥Ìì®ÌÑ∞ Í¥ÄÎ†® Í∏∞ÏóÖÎì§
            'IONQ': 'IonQ Inc.', 'RGTI': 'Rigetti Computing Inc.', 'QUBT': 'Quantum Computing Inc.',
            'ARQQ': 'Arqit Quantum Inc.', 'QTUM': 'Quantum Corp.', 'DEFN': 'DefenseStorm Inc.',
            'TSM': 'Taiwan Semiconductor Manufacturing Co.', 'ASML': 'ASML Holding N.V.',
            
            # ÎÖ∏ÌôîÏó≠Ï†Ñ/Ïû•Ïàò Í∏∞ÏóÖÎì§
            'NVAX': 'Novavax Inc.', 'BNTX': 'BioNTech SE', 'GSK': 'GlaxoSmithKline plc',
            'NVO': 'Novo Nordisk A/S', 'AZN': 'AstraZeneca plc', 'UNITY': 'Unity Biotechnology Inc.',
            'SEER': 'Seer Inc.', 'TWST': 'Twist Bioscience Corp.', 'CRSP': 'CRISPR Therapeutics AG',
            'EDIT': 'Editas Medicine Inc.', 'NTLA': 'Intellia Therapeutics Inc.', 'BEAM': 'Beam Therapeutics Inc.',
            'VERV': 'Verve Therapeutics Inc.',
            
            # Ìï©ÏÑ±ÏÉùÎ¨ºÌïô Í∏∞ÏóÖÎì§
            'FATE': 'Fate Therapeutics Inc.', 'BLUE': 'bluebird bio Inc.',
            'DNA': 'Ginkgo Bioworks Holdings Inc.', 'SYN': 'Synthetic Biologics Inc.', 'AMRS': 'Amyris Inc.',
            'CODX': 'Co-Diagnostics Inc.', 'PACB': 'Pacific Biosciences of California Inc.', 'LIFE': 'aTyr Pharma Inc.',
            'BIO': 'Bio-Rad Laboratories Inc.', 'CDNA': 'CareDx Inc.', 'FOLD': 'Amicus Therapeutics Inc.',
            'RGNX': 'REGENXBIO Inc.', 'SGEN': 'Seagen Inc.', 'HALO': 'Halozyme Therapeutics Inc.',
            'EVGN': 'Evogene Ltd.', 'CYTK': 'Cytokinetics Inc.', 'ABUS': 'Arbutus Biopharma Corp.',
            'IMUX': 'Immunic Inc.',
            
            # Ïä§ÌÖåÏù¥Î∏îÏΩîÏù∏/ÏïîÌò∏ÌôîÌèê Í¥ÄÎ†® Í∏∞ÏóÖÎì§
            'MSTR': 'MicroStrategy Inc.', 'RIOT': 'Riot Blockchain Inc.', 'MARA': 'Marathon Digital Holdings Inc.',
            'CLSK': 'CleanSpark Inc.', 'BITF': 'Bitfarms Ltd.', 'HUT': 'Hut 8 Mining Corp.',
            'CAN': 'Canaan Inc.', 'BTBT': 'Bit Digital Inc.', 'LC': 'LendingClub Corp.',
            'GBTC': 'Grayscale Bitcoin Trust', 'ETHE': 'Grayscale Ethereum Trust', 'LTCN': 'Grayscale Litecoin Trust',
            'BITO': 'ProShares Bitcoin Strategy ETF', 'ARKK': 'ARK Innovation ETF',
            
            # Îç∞Ïù¥ÌÑ∞ÏÑºÌÑ∞ ÎÉâÍ∞ÅÍ∏∞Ïà† Í∏∞ÏóÖÎì§
            'JCI': 'Johnson Controls International plc', 'XYL': 'Xylem Inc.', 'VLTO': 'Veralto Corp.',
            'CGNX': 'Cognex Corp.', 'NOVT': 'Novanta Inc.',
            'AAON': 'AAON Inc.', 'SMTC': 'Semtech Corp.', 'EVTC': 'Evertec Inc.',
            
            # BCI (Îáå-Ïª¥Ìì®ÌÑ∞ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§) Í∏∞ÏóÖÎì§
            'NEGG': 'Newegg Commerce Inc.', 'CTRL': 'Control4 Corp.', 'NURO': 'NeuroMetrix Inc.',
            'SYNC': 'Synacor Inc.', 'LFMD': 'LifeMD Inc.', 'AXGN': 'AxoGen Inc.',
            'PRTS': 'CarParts.com Inc.', 'GMED': 'Globus Medical Inc.', 'KALA': 'Kala Pharmaceuticals Inc.',
            'INVA': 'Innoviva Inc.', 'PHVS': 'Pharvaris N.V.', 'SENS': 'Senseonics Holdings Inc.',
            'CRMD': 'CorMedix Inc.', 'KRYS': 'Krystal Biotech Inc.', 'ATNF': '180 Life Sciences Corp.',
            
            # ÎØ∏Îûò ÎåÄÏû•Ï£º ÌõÑÎ≥¥ Í∏∞ÏóÖÎì§ (Ï∂îÍ∞Ä Îß§Ìïë)
            'C3AI': 'C3.ai Inc.', 'PLTR': 'Palantir Technologies Inc.'
        }

    def _get_korea_company_names_parallel(self, symbols):
        """ÌïúÍµ≠ Í∏∞ÏóÖÎ™Ö Î≥ëÎ†¨ Ï≤òÎ¶¨Î°ú Í∞ÄÏ†∏Ïò§Í∏∞"""
        companies = {}
        
        def get_company_name(symbol):
            try:
                ticker = yf.Ticker(symbol)
                info = ticker.info
                company_name = info.get('longName', info.get('shortName', symbol))
                return symbol, company_name
            except Exception as e:
                print(f"[WARNING] {symbol} ÌöåÏÇ¨Î™Ö Ï°∞Ìöå Ïã§Ìå®: {e}")
                return symbol, symbol
        
        # ThreadPoolExecutorÎ°ú Î≥ëÎ†¨ Ï≤òÎ¶¨
        with ThreadPoolExecutor(max_workers=3) as executor:
            # Î™®Îì† ÏûëÏóÖÏùÑ Ï†úÏ∂ú
            future_to_symbol = {executor.submit(get_company_name, symbol): symbol for symbol in symbols}
            
            # ÏôÑÎ£åÎêú ÏûëÏóÖÎ∂ÄÌÑ∞ Í≤∞Í≥º ÏàòÏßë
            for future in as_completed(future_to_symbol):
                symbol, company_name = future.result()
                companies[symbol] = company_name
        
        return companies

    def create_stock_chart(self, analysis):
        """Ï¢ÖÎ™© Ï∞®Ìä∏ ÏÉùÏÑ±"""
        try:
            df = analysis['data']
            symbol = analysis['symbol']
            company_name = analysis['company_name']
            score = analysis['score']
            period_label = analysis['period_label']
            
            # Ï∫îÎì§Ïä§Ìã± Ï∞®Ìä∏ ÏÉùÏÑ±
            fig = go.Figure()
            
            # Ï∫îÎì§Ïä§Ìã± (ÏñëÎ¥â: Îπ®Í∞ÑÏÉâ, ÏùåÎ¥â: ÌååÎûÄÏÉâ, Ìà¨Î™ÖÎèÑ Ï†ÅÏö©)
            fig.add_trace(go.Candlestick(
                x=df.index,
                open=df['Open'],
                high=df['High'],
                low=df['Low'],
                close=df['Close'],
                name='Ï£ºÍ∞Ä',
                increasing=dict(line=dict(color='red'), fillcolor='rgba(255, 0, 0, 0.7)'),
                decreasing=dict(line=dict(color='blue'), fillcolor='rgba(0, 0, 255, 0.7)')
            ))
            
            # Ïù¥ÎèôÌèâÍ∑†ÏÑ†Îì§
            fig.add_trace(go.Scatter(
                x=df.index,
                y=df['MA20'],
                mode='lines',
                name='20ÏùºÏÑ†',
                line=dict(color='red', width=2)
            ))
            
            fig.add_trace(go.Scatter(
                x=df.index,
                y=df['MA60'],
                mode='lines',
                name='60ÏùºÏÑ†',
                line=dict(color='blue', width=2)
            ))
            
            fig.add_trace(go.Scatter(
                x=df.index,
                y=df['MA125'],
                mode='lines',
                name='125ÏùºÏÑ†',
                line=dict(color='orange', width=2)
            ))
            
            # Í≥®Îì†ÌÅ¨Î°úÏä§ ÌëúÏãú
            if analysis['golden_cross'] and analysis['cross_date']:
                cross_date = analysis['cross_date']
                cross_price = df.loc[cross_date, 'MA20']
                
                # Í≥®Îì†ÌÅ¨Î°úÏä§ ÎßàÏª§
                fig.add_trace(go.Scatter(
                    x=[cross_date],
                    y=[cross_price],
                    mode='markers',
                    marker=dict(color='red', size=15, symbol='star', line=dict(color='black', width=2)),
                    name='Í≥®Îì†ÌÅ¨Î°úÏä§',
                    text=[f'Í≥®Îì†ÌÅ¨Î°úÏä§<br>{cross_date.strftime("%Y-%m-%d")}'],
                    hovertemplate='%{text}<extra></extra>'
                ))
            
            # MA Ï°∞Í±¥ ÌôïÏù∏: ÌòÑÏû¨Í∞ÄÍ∞Ä 20ÏùºÏÑ†, 60ÏùºÏÑ† ÏúÑÏóê ÏûàÏùÑ ÎïåÎßå ÌëúÏãú
            if analysis['above_ma_lines']:
                current_price = df['Close'].iloc[-1]
                ma20 = df['MA20'].iloc[-1]
                ma60 = df['MA60'].iloc[-1]
                
                # Ï°∞Í±¥ Ïû¨ÌôïÏù∏: ÌòÑÏû¨Í∞Ä > 20ÏùºÏÑ†, 60ÏùºÏÑ†
                if current_price > ma20 and current_price > ma60:
                    recent_date = df.index[-1]
                    
                    # ÌÖçÏä§Ìä∏ Ï£ºÏÑù Ï∂îÍ∞Ä
                    fig.add_annotation(
                        x=recent_date,
                        y=current_price * 1.03,
                        text="ÌòÑÏû¨Í∞Ä 20,60ÏùºÏÑ† ÏúÑ",
                        showarrow=True,
                        arrowhead=2,
                        arrowsize=1,
                        arrowwidth=2,
                        arrowcolor="green",
                        font=dict(size=10, color="green")
                    )
            
            fig.update_layout(
                title=f"{company_name} ({symbol}) - Ï†êÏàò: {score}Ï†ê ({period_label})",
                xaxis_title="ÎÇ†Ïßú",
                yaxis_title="Í∞ÄÍ≤©",
                height=600,
                showlegend=True,
                plot_bgcolor='white',
                paper_bgcolor='white',
                xaxis=dict(
                    gridcolor='lightgray',
                    rangeslider=dict(visible=False)
                ),
                yaxis=dict(
                    gridcolor='lightgray',
                    tickformat='.0f',
                    separatethousands=True,
                    tickmode='auto',
                    nticks=10,
                    autorange=True,
                    fixedrange=False,
                    automargin=True
                ),
                margin=dict(t=35, b=35, l=35, r=35),
                dragmode='zoom'
            )
            
            return fig
            
        except Exception as e:
            print(f"[ERROR] Ï∞®Ìä∏ ÏÉùÏÑ± Ï§ë Ïò§Î•ò: {str(e)}")
            return None

# Streamlit Ïï± Î©îÏù∏ Ìï®Ïàò
def main():
    st.set_page_config(
        page_title="üìà Ï£ºÏãù Í∏∞Ïà†Ï†Å Î∂ÑÏÑù Ï¢ÖÎ™© Ï∂îÏ≤ú ÏãúÏä§ÌÖú",
        page_icon="üìà",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.title("üìà Ï£ºÏãù Í∏∞Ïà†Ï†Å Î∂ÑÏÑù Ï¢ÖÎ™© Ï∂îÏ≤ú ÏãúÏä§ÌÖú (ÎØ∏Îûò ÎåÄÏû•Ï£º ÏóÑÏÑ† Ìè¨Ìï®)")
    
    # ÏÇ¨Ïù¥ÎìúÎ∞î ÏÑ§Ï†ï
    st.sidebar.header("üîç Î∂ÑÏÑù ÏÑ§Ï†ï")
    
    market = st.sidebar.selectbox(
        "ÏãúÏû•/ÏÑπÌÑ∞ ÏÑ†ÌÉù",
        options=['SP500', 'NASDAQ', 'ALL', 'KOSPI', 'KOSDAQ', 'FUTURE_LEADERS', 'AEROSPACE', 'QUANTUM', 'LONGEVITY', 'SYNTHETIC_BIO', 'STABLECOIN', 'DATACENTER_COOLING', 'BCI'],
        format_func=lambda x: {
            'SP500': 'S&P 500 (Ï†ÑÏ≤¥ 500Í∞ú)',
            'NASDAQ': 'NASDAQ (Ï†ÑÏ≤¥ Ï£ºÏöî Í∏∞Ïà†Ï£º)',
            'ALL': 'ÎØ∏Íµ≠ Ï†ÑÏ≤¥ (S&P500 + NASDAQ)',
            'KOSPI': 'KOSPI (50Í∞ú)',
            'KOSDAQ': 'KOSDAQ (50Í∞ú)',
            'FUTURE_LEADERS': 'üåü ÎØ∏Îûò ÎåÄÏû•Ï£º ÏóÑÏÑ† (60Í∞ú)',
            'AEROSPACE': 'üöÄ Ïö∞Ï£ºÌï≠Í≥µ ÏÑπÌÑ∞',
            'QUANTUM': '‚öõÔ∏è ÏñëÏûêÏª¥Ìì®ÌÑ∞ ÏÑπÌÑ∞',
            'LONGEVITY': 'üß¨ ÎÖ∏ÌôîÏó≠Ï†Ñ/Ïû•Ïàò ÏÑπÌÑ∞',
            'SYNTHETIC_BIO': 'üî¨ Ìï©ÏÑ±ÏÉùÎ¨ºÌïô ÏÑπÌÑ∞',
            'STABLECOIN': 'üí∞ Ïä§ÌÖåÏù¥Î∏îÏΩîÏù∏/ÏïîÌò∏ÌôîÌèê ÏÑπÌÑ∞',
            'DATACENTER_COOLING': '‚ùÑÔ∏è Îç∞Ïù¥ÌÑ∞ÏÑºÌÑ∞ ÎÉâÍ∞ÅÍ∏∞Ïà† ÏÑπÌÑ∞',
            'BCI': 'üß† Îáå-Ïª¥Ìì®ÌÑ∞ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§(BCI) ÏÑπÌÑ∞'
        }[x]
    )
    
    period = st.sidebar.selectbox(
        "üìÖ Ï°∞Ìöå Í∏∞Í∞Ñ ÏÑ§Ï†ï",
        options=['1mo', '3mo', '6mo', '1y', '2y', '5y'],
        index=2,  # Í∏∞Î≥∏Í∞í: 6mo
        format_func=lambda x: {
            '1mo': '1Í∞úÏõî',
            '3mo': '3Í∞úÏõî',
            '6mo': '6Í∞úÏõî',
            '1y': '1ÎÖÑ',
            '2y': '2ÎÖÑ',
            '5y': '5ÎÖÑ'
        }[x]
    )
    
    # Î∂ÑÏÑù ÏãúÏûë Î≤ÑÌäº
    analyze_button = st.sidebar.button("üöÄ Î∂ÑÏÑù ÏãúÏûë", type="primary")
    
    # Í≤ΩÍ≥† Î©îÏãúÏßÄ ÌëúÏãú
    if market in ['SP500', 'NASDAQ', 'ALL']:
        expected_count = {
            'SP500': '500Í∞ú',
            'NASDAQ': '400Í∞ú+',
            'ALL': '900Í∞ú+'
        }
        st.sidebar.warning(f"‚ö†Ô∏è {market} Ï†ÑÏ≤¥ Î∂ÑÏÑù ÏòàÏÉÅ ÏãúÍ∞Ñ: 5Î∂Ñ Ïù¥ÎÇ¥\nÏòàÏÉÅ Ï¢ÖÎ™© Ïàò: {expected_count[market]}")
    elif market in ['AEROSPACE', 'QUANTUM', 'LONGEVITY', 'SYNTHETIC_BIO', 'STABLECOIN', 'DATACENTER_COOLING', 'BCI', 'FUTURE_LEADERS']:
        sector_info = {
            'FUTURE_LEADERS': 'üåü ÎØ∏Îûò ÎåÄÏû•Ï£º ÏóÑÏÑ† 60Í∞ú Í∏∞ÏóÖ (Í∞Å ÏÑπÌÑ∞ ÏµúÍ≥† Ïú†ÎßùÏ£º)',
            'AEROSPACE': 'Ïö∞Ï£ºÌï≠Í≥µ Í¥ÄÎ†® 33Í∞ú Í∏∞ÏóÖ',
            'QUANTUM': 'ÏñëÏûêÏª¥Ìì®ÌÑ∞ Í¥ÄÎ†® 24Í∞ú Í∏∞ÏóÖ', 
            'LONGEVITY': 'ÎÖ∏ÌôîÏó≠Ï†Ñ/Ïû•Ïàò Í¥ÄÎ†® 36Í∞ú Í∏∞ÏóÖ',
            'SYNTHETIC_BIO': 'Ìï©ÏÑ±ÏÉùÎ¨ºÌïô Í¥ÄÎ†® 36Í∞ú Í∏∞ÏóÖ',
            'STABLECOIN': 'Ïä§ÌÖåÏù¥Î∏îÏΩîÏù∏/ÏïîÌò∏ÌôîÌèê Í¥ÄÎ†® 27Í∞ú Í∏∞ÏóÖ',
            'DATACENTER_COOLING': 'Îç∞Ïù¥ÌÑ∞ÏÑºÌÑ∞ ÎÉâÍ∞ÅÍ∏∞Ïà† Í¥ÄÎ†® 31Í∞ú Í∏∞ÏóÖ',
            'BCI': 'Îáå-Ïª¥Ìì®ÌÑ∞ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Í¥ÄÎ†® 35Í∞ú Í∏∞ÏóÖ'
        }
        st.sidebar.info(f"‚ÑπÔ∏è {sector_info[market]}\nÏòàÏÉÅ Î∂ÑÏÑù ÏãúÍ∞Ñ: 1Î∂Ñ Ïù¥ÎÇ¥")
    
    # StockAnalyzer Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    if 'analyzer' not in st.session_state:
        st.session_state.analyzer = StockAnalyzer()
    
    analyzer = st.session_state.analyzer
    
    # Î∂ÑÏÑù Í≤∞Í≥º Ï†ÄÏû•Ïö© session state
    if 'analysis_results' not in st.session_state:
        st.session_state.analysis_results = []
    
    # Í≥µÌè¨ ÌÉêÏöï ÏßÄÏàò (full width)
    st.subheader("üò® Í≥µÌè¨ ÌÉêÏöï ÏßÄÏàò")
    
    if analyze_button or 'fear_greed_current' in st.session_state:
        try:
            if analyze_button:
                with st.spinner("Í≥µÌè¨ ÌÉêÏöï ÏßÄÏàò Î°úÎî© Ï§ë..."):
                    fear_greed = analyzer.get_fear_greed_index(period)
                    st.session_state.fear_greed_current = fear_greed
                    st.session_state.fear_greed_label = analyzer.fear_greed_label
                    st.session_state.fear_greed_chart = analyzer.get_fear_greed_chart()
            
            # ÌòÑÏû¨ ÏßÄÏàò ÌëúÏãú
            fear_greed = st.session_state.get('fear_greed_current', 50.0)
            fear_greed_label = st.session_state.get('fear_greed_label', 'Neutral')
            
            # Í∞êÏ†ï ÏÉÅÌÉú Î∞è ÏÉâÏÉÅ Í≤∞Ï†ï
            if fear_greed >= 75:
                color = 'red'
                emotion = 'Í∑πÎèÑÏùò ÌÉêÏöï'
            elif fear_greed >= 55:
                color = 'orange'
                emotion = 'ÌÉêÏöï'
            elif fear_greed >= 45:
                color = 'gray'
                emotion = 'Ï§ëÎ¶Ω'
            elif fear_greed >= 25:
                color = 'blue'
                emotion = 'Í≥µÌè¨'
            else:
                color = 'darkblue'
                emotion = 'Í∑πÎèÑÏùò Í≥µÌè¨'
            
            # ÏßÄÏàòÏôÄ Ï∞®Ìä∏Î•º ÎÇòÎûÄÌûà Î∞∞Ïπò
            col1, col2 = st.columns([1, 3])
            
            with col1:
                # ÏßÄÏàò ÌëúÏãú
                st.markdown(f"""
                <div style="text-align: center; padding: 20px; border: 2px solid {color}; border-radius: 10px; margin: 10px 0;">
                    <h1 style="color: {color}; margin: 0;">{fear_greed:.1f}</h1>
                    <h3 style="color: {color}; margin: 0;">{emotion}</h3>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                # Ï∞®Ìä∏ ÌëúÏãú
                if 'fear_greed_chart' in st.session_state:
                    st.plotly_chart(st.session_state.fear_greed_chart, use_container_width=True)
                    
        except Exception as e:
            st.error(f"Í≥µÌè¨ ÌÉêÏöï ÏßÄÏàò Î°úÎî© Ïã§Ìå®: {e}")
            st.markdown("""
            <div style="text-align: center; padding: 20px; border: 2px solid gray; border-radius: 10px; margin: 10px 0;">
                <h1 style="color: gray; margin: 0;">50.0</h1>
                <h3 style="color: gray; margin: 0;">Ï§ëÎ¶Ω (Ïò§Î•ò)</h3>
            </div>
            """, unsafe_allow_html=True)
    else:
        st.info("ÏôºÏ™ΩÏóêÏÑú Î∂ÑÏÑù ÏÑ§Ï†ïÏùÑ ÏÑ†ÌÉùÌïòÍ≥† 'Î∂ÑÏÑù ÏãúÏûë' Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî.")
    
    # Î∂ÑÏÑù Ïã§Ìñâ
    if analyze_button:
        # ÏßÑÌñâÎ•† ÌëúÏãúÏö© Ïª®ÌÖåÏù¥ÎÑà
        progress_container = st.container()
        
        with progress_container:
            st.subheader(f"üîÑ {market} Î∂ÑÏÑù ÏßÑÌñâ Ï§ë...")
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            try:
                status_text.text("Î∂ÑÏÑùÏùÑ ÏãúÏûëÌï©ÎãàÎã§...")
                
                # Î∂ÑÏÑù Ïã§Ìñâ
                results = analyzer.get_recommendations(market, period)
                
                progress_bar.progress(100)
                status_text.text(f"‚úÖ Î∂ÑÏÑù ÏôÑÎ£å! Ï¥ù {len(results)}Í∞ú Ï¢ÖÎ™© Î∂ÑÏÑùÎê®")
                
                st.session_state.analysis_results = results
                st.session_state.current_market = market
                st.session_state.current_period = period
                
                st.success(f"‚úÖ {market} Î∂ÑÏÑù ÏôÑÎ£å! Ï¥ù {len(results)}Í∞ú Ï¢ÖÎ™© Ï§ë ÏÉÅÏúÑ Ï¢ÖÎ™©Îì§ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.")
                
            except Exception as e:
                st.error(f"‚ùå Î∂ÑÏÑù Ï§ë Ïò§Î•ò Î∞úÏÉù: {str(e)}")
                st.session_state.analysis_results = []
            finally:
                # ÏßÑÌñâÎ•† ÌëúÏãú Ï†úÍ±∞
                progress_container.empty()
    
    # Î∂ÑÏÑù Í≤∞Í≥º ÌëúÏãú
    if st.session_state.analysis_results:
        st.subheader("üéØ Î∂ÑÏÑù Í≤∞Í≥º")
        
        # ÌÜµÍ≥Ñ Ï†ïÎ≥¥ ÌëúÏãú
        total_stocks = len(st.session_state.analysis_results)
        high_score_stocks = len([r for r in st.session_state.analysis_results if r['score'] >= 75])
        medium_score_stocks = len([r for r in st.session_state.analysis_results if 50 <= r['score'] < 75])
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Ï¥ù Î∂ÑÏÑù Ï¢ÖÎ™©", f"{total_stocks}Í∞ú")
        with col2:
            st.metric("Í≥†ÎìùÏ†ê (75Ï†ê+)", f"{high_score_stocks}Í∞ú")
        with col3:
            st.metric("Ï§ëÍ∞ÑÏ†êÏàò (50-74Ï†ê)", f"{medium_score_stocks}Í∞ú")
        with col4:
            current_market = st.session_state.get('current_market', market)
            st.metric("Î∂ÑÏÑù ÏãúÏû•/ÏÑπÌÑ∞", current_market)
        
        # Ï†êÏàòÎ≥Ñ ÌïÑÌÑ∞ÎßÅ ÏòµÏÖò
        score_filter = st.selectbox(
            "Ï†êÏàòÎ≥Ñ ÌïÑÌÑ∞ÎßÅ",
            options=['Ï†ÑÏ≤¥', 'Í≥†ÎìùÏ†ê (75Ï†ê+)', 'Ï§ëÍ∞ÑÏù¥ÏÉÅ (50Ï†ê+)', 'Í≥®Îì†ÌÅ¨Î°úÏä§Îßå', 'Ï∂îÏÑ∏ÏïàÏ†ïÎßå'],
            index=0
        )
        
        # ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©
        filtered_results = st.session_state.analysis_results.copy()
        
        if score_filter == 'Í≥†ÎìùÏ†ê (75Ï†ê+)':
            filtered_results = [r for r in filtered_results if r['score'] >= 75]
        elif score_filter == 'Ï§ëÍ∞ÑÏù¥ÏÉÅ (50Ï†ê+)':
            filtered_results = [r for r in filtered_results if r['score'] >= 50]
        elif score_filter == 'Í≥®Îì†ÌÅ¨Î°úÏä§Îßå':
            filtered_results = [r for r in filtered_results if r['golden_cross']]
        elif score_filter == 'Ï∂îÏÑ∏ÏïàÏ†ïÎßå':
            filtered_results = [r for r in filtered_results if r['trend_stable']]
        
        # Í≤∞Í≥ºÎ•º DataFrameÏúºÎ°ú Î≥ÄÌôò
        if filtered_results:
            results_data = []
            for i, result in enumerate(filtered_results):
                results_data.append({
                    'Index': i,
                    'Symbol': result['symbol'],
                    'Company': result['company_name'],
                    'Price': f"${result['current_price']:.2f}",
                    'GC': '‚úÖ' if result['golden_cross'] else '‚ùå',
                    'MA': '‚úÖ' if result['above_ma_lines'] else '‚ùå', 
                    '125': '‚úÖ' if result['ma125_support'] else '‚ùå',
                    'Trend': '‚úÖ' if result['trend_stable'] else '‚ùå',
                    'Score': result['score']
                })
            
            df_results = pd.DataFrame(results_data)
            
            st.write(f"üìä ÌïÑÌÑ∞ÎßÅÎêú Í≤∞Í≥º: {len(filtered_results)}Í∞ú Ï¢ÖÎ™©")
            
            # Îç∞Ïù¥ÌÑ∞ÌîÑÎ†àÏûÑ ÌëúÏãú (ÌÅ¥Î¶≠ Í∞ÄÎä•)
            selected_indices = st.dataframe(
                df_results[['Symbol', 'Company', 'Price', 'GC', 'MA', '125', 'Trend', 'Score']],
                use_container_width=True,
                hide_index=True,
                on_select="rerun",
                selection_mode="single-row"
            )
            
            # ÏÑ†ÌÉùÎêú Ï¢ÖÎ™©Ïùò Ï∞®Ìä∏ ÌëúÏãú
            if selected_indices['selection']['rows']:
                selected_idx = selected_indices['selection']['rows'][0]
                selected_result = filtered_results[selected_idx]
                
                st.subheader(f"üìä {selected_result['company_name']} ({selected_result['symbol']}) Ï∞®Ìä∏")
                
                # Ï∞®Ìä∏ ÏÉùÏÑ± Î∞è ÌëúÏãú
                with st.spinner("Ï∞®Ìä∏ ÏÉùÏÑ± Ï§ë..."):
                    chart = analyzer.create_stock_chart(selected_result)
                    if chart:
                        st.plotly_chart(chart, use_container_width=True)
                    else:
                        st.error("Ï∞®Ìä∏Î•º ÏÉùÏÑ±Ìï† Ïàò ÏóÜÏäµÎãàÎã§.")
                        
                # Î∂ÑÏÑù ÏÑ∏Î∂Ä Ï†ïÎ≥¥ ÌëúÏãú
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("Í≥®Îì†ÌÅ¨Î°úÏä§", "‚úÖ" if selected_result['golden_cross'] else "‚ùå")
                with col2:
                    st.metric("Ïù¥ÌèâÏÑ† ÏúÑ", "‚úÖ" if selected_result['above_ma_lines'] else "‚ùå")
                with col3:
                    st.metric("125ÏùºÏÑ† ÏßÄÏßÄ", "‚úÖ" if selected_result['ma125_support'] else "‚ùå")
                with col4:
                    st.metric("Ï∂îÏÑ∏ ÏïàÏ†ï", "‚úÖ" if selected_result['trend_stable'] else "‚ùå")
                    
                # Ï¢ÖÌï© Ï†êÏàò ÌëúÏãú
                score_color = "green" if selected_result['score'] >= 75 else "orange" if selected_result['score'] >= 50 else "red"
                st.markdown(f"""
                <div style="text-align: center; padding: 15px; border: 2px solid {score_color}; border-radius: 10px; margin: 10px 0;">
                    <h2 style="color: {score_color}; margin: 0;">Ï¢ÖÌï© Ï†êÏàò: {selected_result['score']}Ï†ê</h2>
                </div>
                """, unsafe_allow_html=True)
                
                # Ï∂îÍ∞Ä Ï†ïÎ≥¥ ÌëúÏãú
                if selected_result['golden_cross'] and selected_result['cross_date']:
                    st.info(f"üåü Í≥®Îì†ÌÅ¨Î°úÏä§ Î∞úÏÉùÏùº: {selected_result['cross_date'].strftime('%Y-%m-%d')}")
                
                if selected_result['ma125_support']:
                    st.info(f"üõ°Ô∏è 125ÏùºÏÑ† ÏßÄÏßÄ: ÏµúÍ∑º {selected_result['support_count']}Í∞ú Ï∫îÎì§Ïù¥ 125ÏùºÏÑ† ÏúÑÏóêÏÑú ÏßÄÏßÄ")
        else:
            st.warning("ÌïÑÌÑ∞ÎßÅ Ï°∞Í±¥Ïóê Ìï¥ÎãπÌïòÎäî Ï¢ÖÎ™©Ïù¥ ÏóÜÏäµÎãàÎã§.")
    
    # ÏÇ¨Ïù¥ÎìúÎ∞îÏóê ÏÇ¨Ïö©Î≤ï ÏÑ§Î™Ö
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üìñ ÏÇ¨Ïö©Î≤ï")
    st.sidebar.markdown("""
    1. **ÏãúÏû•/ÏÑπÌÑ∞ ÏÑ†ÌÉù**: Î∂ÑÏÑùÌï† ÏãúÏû•Ïù¥ÎÇò ÏÑπÌÑ∞Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî
       - **Ï†ÑÌÜµ ÏãúÏû•**: S&P 500, NASDAQ, KOSPI, KOSDAQ
       - **üåü ÎØ∏Îûò ÎåÄÏû•Ï£º**: Í∞Å ÏÑπÌÑ∞ ÏµúÍ≥† Ïú†ÎßùÏ£ºÎßå ÏóÑÏÑ† (60Í∞ú)
       - **ÎØ∏Îûò ÏÑ±Ïû• ÏÑπÌÑ∞**: 
         - üöÄ Ïö∞Ï£ºÌï≠Í≥µ (SpaceX, Boeing, Lockheed Îì±)
         - ‚öõÔ∏è ÏñëÏûêÏª¥Ìì®ÌÑ∞ (IBM, Google, IonQ Îì±) 
         - üß¨ ÎÖ∏ÌôîÏó≠Ï†Ñ/Ïû•Ïàò (Unity Bio, CRISPR Îì±)
         - üî¨ Ìï©ÏÑ±ÏÉùÎ¨ºÌïô (Twist Bio, Ginkgo Îì±)
         - üí∞ Ïä§ÌÖåÏù¥Î∏îÏΩîÏù∏/ÏïîÌò∏ÌôîÌèê (Coinbase, MicroStrategy Îì±)
         - ‚ùÑÔ∏è Îç∞Ïù¥ÌÑ∞ÏÑºÌÑ∞ ÎÉâÍ∞Å (Johnson Controls, Xylem Îì±)
         - üß† BCI/ÎáåÏª¥Ìì®ÌÑ∞ (Tesla, Meta, Neuralink Í¥ÄÎ†® Îì±)
    2. **Í∏∞Í∞Ñ ÏÑ§Ï†ï**: Ï∞®Ìä∏ Ï°∞Ìöå Í∏∞Í∞ÑÏùÑ ÏÑ§Ï†ïÌïòÏÑ∏Ïöî  
    3. **Î∂ÑÏÑù ÏãúÏûë**: Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ Î∂ÑÏÑùÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî
    4. **Í≤∞Í≥º ÌôïÏù∏**: Ï†êÏàòÎ≥Ñ ÌïÑÌÑ∞ÎßÅ ÌõÑ Ï¢ÖÎ™©ÏùÑ ÌÅ¥Î¶≠ÌïòÎ©¥ Ï∞®Ìä∏Í∞Ä ÌëúÏãúÎê©ÎãàÎã§
    
    **Ï†êÏàò Í∏∞Ï§Ä:**
    - Í≥®Îì†ÌÅ¨Î°úÏä§: 25Ï†ê
    - Ïù¥ÌèâÏÑ† ÏúÑ: 25Ï†ê  
    - 125ÏùºÏÑ† ÏßÄÏßÄ: 25Ï†ê
    - Ï∂îÏÑ∏ ÏïàÏ†ï: 25Ï†ê
    
    **‚ö†Ô∏è Ï£ºÏùòÏÇ¨Ìï≠:**
    - Ï†ÑÏ≤¥ ÏãúÏû• Î∂ÑÏÑùÏùÄ ÏãúÍ∞ÑÏù¥ Ïò§Îûò Í±∏Î¶ΩÎãàÎã§
    - ÏÑπÌÑ∞Î≥Ñ Î∂ÑÏÑùÏùÄ Îπ†Î•¥Í≤å ÏôÑÎ£åÎê©ÎãàÎã§ (1Î∂Ñ Ïù¥ÎÇ¥)
    """)
    
    st.sidebar.markdown("---")
    st.sidebar.markdown("### ‚ÑπÔ∏è ÏÑπÌÑ∞Î≥Ñ Î∂ÑÏÑù Ï†ïÎ≥¥")
    st.sidebar.markdown("""
    **üåü ÎØ∏Îûò ÎåÄÏû•Ï£º ÏóÑÏÑ† ÏÑπÌÑ∞:**
    - Í∞Å ÎØ∏Îûò ÏÑ±Ïû• ÏÑπÌÑ∞ÏóêÏÑú Í∞ÄÏû• Ïú†ÎßùÌïú Í∏∞ÏóÖÎì§Îßå ÏÑ†Î≥Ñ
    - üöÄ Ïö∞Ï£ºÌï≠Í≥µ: Rocket Lab, Virgin Galactic, Boeing, Lockheed
    - ‚öõÔ∏è ÏñëÏûêÏª¥Ìì®ÌÑ∞: IonQ, Rigetti, IBM, Google, NVIDIA
    - üß¨ ÎÖ∏ÌôîÏó≠Ï†Ñ: Unity Bio, CRISPR, Editas, Beam Therapeutics
    - üî¨ Ìï©ÏÑ±ÏÉùÎ¨ºÌïô: Ginkgo Bioworks, Twist Bio, Amyris
    - üí∞ ÏïîÌò∏ÌôîÌèê: Coinbase, MicroStrategy, Riot, Marathon
    - ‚ùÑÔ∏è Îç∞Ïù¥ÌÑ∞ÏÑºÌÑ∞: NVIDIA, AMD, Johnson Controls
    - üß† BCI: Tesla, Meta, NVIDIA, Intuitive Surgical
    - ü§ñ AI/Î°úÎ¥á: NVIDIA, Google, Microsoft, Palantir
    
    **ÎØ∏Îûò ÏÑ±Ïû• ÏÑπÌÑ∞ ÌäπÏßï:**
    - üöÄ **Ïö∞Ï£ºÌï≠Í≥µ**: Ïö∞Ï£ºÏó¨Ìñâ, ÏúÑÏÑ±ÌÜµÏã†, Ìï≠Í≥µÏö∞Ï£º
    - ‚öõÔ∏è **ÏñëÏûêÏª¥Ìì®ÌÑ∞**: ÏñëÏûêÌîÑÎ°úÏÑ∏ÏÑú, ÏñëÏûêÏïåÍ≥†Î¶¨Ï¶ò
    - üß¨ **ÎÖ∏ÌôîÏó≠Ï†Ñ**: Ïú†Ï†ÑÏûêÏπòÎ£å, Ï§ÑÍ∏∞ÏÑ∏Ìè¨, ÏàòÎ™ÖÏó∞Ïû•
    - üî¨ **Ìï©ÏÑ±ÏÉùÎ¨ºÌïô**: DNAÌé∏Ïßë, Î∞îÏù¥Ïò§Ï†úÏ°∞
    - üí∞ **Ïä§ÌÖåÏù¥Î∏îÏΩîÏù∏**: Î∏îÎ°ùÏ≤¥Ïù∏, ÎîîÏßÄÌÑ∏ÏûêÏÇ∞
    - ‚ùÑÔ∏è **Îç∞Ïù¥ÌÑ∞ÏÑºÌÑ∞ ÎÉâÍ∞Å**: AIÏπ© ÎÉâÍ∞Å, ÏóêÎÑàÏßÄÌö®Ïú®
    - üß† **BCI**: ÎáåÏûÑÌîåÎûÄÌä∏, Îâ¥Îü¥Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
    
    **Ìà¨Ïûê Ïãú Í≥†Î†§ÏÇ¨Ìï≠:**
    - Ïã†Í∏∞Ïà† ÏÑπÌÑ∞Îäî Î≥ÄÎèôÏÑ±Ïù¥ ÌÅ¥ Ïàò ÏûàÏäµÎãàÎã§
    - Ïû•Í∏∞Ï†Å ÏÑ±Ïû• Í¥ÄÏ†êÏóêÏÑú Ï†ëÍ∑ºÌïòÏÑ∏Ïöî
    - Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î∂ÑÏÇ∞ÏùÑ Í∂åÏû•Ìï©ÎãàÎã§
    """)
    
    st.sidebar.markdown("---")
    st.sidebar.markdown("### ‚ÑπÔ∏è Î∂ÑÏÑù Ï†ïÎ≥¥")
    st.sidebar.markdown("""
    - Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò Î∂ÑÏÑù
    - Í∏∞Ïà†Ï†Å Î∂ÑÏÑù ÏßÄÌëú ÌôúÏö©
    - Í≥®Îì†ÌÅ¨Î°úÏä§ Ìå®ÌÑ¥ Í∞êÏßÄ
    - Ïù¥ÎèôÌèâÍ∑†ÏÑ† Í∏∞Î∞ò Ï∂îÏÑ∏ Î∂ÑÏÑù
    - ÎåÄÏö©Îüâ Î≥ëÎ†¨ Ï≤òÎ¶¨ ÏµúÏ†ÅÌôî
    - Î∞∞Ïπò Îã®ÏúÑ Î∂ÑÏÑùÏúºÎ°ú ÏïàÏ†ïÏÑ± ÌôïÎ≥¥
    """)
    
    # ÌïòÎã® Ï†ïÎ≥¥
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: gray; font-size: 12px;">
    üìà Ï£ºÏãù Í∏∞Ïà†Ï†Å Î∂ÑÏÑù Ï¢ÖÎ™© Ï∂îÏ≤ú ÏãúÏä§ÌÖú (ÎØ∏Îûò ÎåÄÏû•Ï£º ÏóÑÏÑ† Ìè¨Ìï®)<br>
    üåü ÎØ∏Îûò ÎåÄÏû•Ï£º ÏóÑÏÑ† ÌäπÌôî Î∂ÑÏÑù | ‚ö†Ô∏è Ìà¨Ïûê Í≤∞Ï†ïÏùÄ Î≥∏Ïù∏Ïùò ÌåêÎã®Í≥º Ï±ÖÏûÑ ÌïòÏóê ÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.
    </div>
    """, unsafe_allow_html=True)

if __name__ == '__main__':
    main()
